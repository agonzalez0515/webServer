import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // Use Mockito
    testImplementation 'org.mockito:mockito-core:2.+'

    compile group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.6'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
}

application {
    // Define the main class for the application.
    mainClassName = 'webserver.App'
}

jar {
    manifest {
        attributes 'Main-Class': 'webserver.App'

    }
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

run {
    systemProperty 'port', System.getProperty('port')
    systemProperty 'directory', System.getProperty('directory')
}
